// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag at
// 2021-03-01 21:51:22.303161 -0500 EST m=+0.067531550

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Alex Brown",
            "email": "alex@redantelope.com"
        },
        "license": {
            "name": "Apache 2.0"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/entities/": {
            "get": {
                "description": "Gets all entities in DB",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "entities"
                ],
                "summary": "Gets all entities",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entities.Item"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a entities document",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "entities"
                ],
                "summary": "Creates paper document based on RAW entities",
                "parameters": [
                    {
                        "description": "New Paper",
                        "name": "entities",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "New Paper ID(Hex)",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/entities/:pid": {
            "get": {
                "description": "Gets a given Paper in a Paper BSON format",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "entities"
                ],
                "summary": "Gets a given Paper JSON",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.Item"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates a paper given an paper ID and payload",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "entities"
                ],
                "summary": "Updates a entities document",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Paper to update",
                        "name": "pid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated Paper",
                        "name": "entities",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entities.Item"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated Paper",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes an entities given an entities ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "entities"
                ],
                "summary": "Deletes a entities entities",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Task to delete",
                        "name": "pid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated Task"
                    }
                }
            }
        }
    },
    "definitions": {
        "entities.Item": {
            "type": "object",
            "properties": {
                "_id": {
                    "description": "Identifier",
                    "type": "string"
                },
                "children": {
                    "description": "Children is the list of all items that are indented by at least one tab\nbelow the current item.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entities.Item"
                    }
                },
                "content": {
                    "description": "Content is the item text, not including the \"- \" prefix for Kind=Task or\nthe \":\" suffix for Kind=Project.",
                    "type": "string"
                },
                "indent": {
                    "description": "Indent is the amount of additional tabs the original item was indented by\nif it's more than the single tab that establishes it as a child of the\nprevious line item.",
                    "type": "integer"
                },
                "kind": {
                    "description": "Kind is the item kind.",
                    "type": "string"
                },
                "tags": {
                    "description": "Holds all tags",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "localhost:27017",
	BasePath:    "/api/v1",
	Schemes:     []string{},
	Title:       "Taskpaper API",
	Description: "This API is used for providing a entities API for entities data",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
