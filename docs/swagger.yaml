basePath: /api/v1
definitions:
  entity.Entity:
    properties:
      createdAt:
        type: string
      date:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      items:
        items:
          $ref: '#/definitions/entity.EntityItem'
        type: array
      name:
        type: string
      updatedAt:
        type: string
      value:
        maximum: 100
        minimum: 0
        type: integer
    required:
    - date
    - name
    type: object
  entity.EntityItem:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      item-name:
        type: string
      updatedAt:
        type: string
    required:
    - item-name
    type: object
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  utils.ResponseData:
    properties:
      data: {}
      meta: {}
      status:
        type: integer
    type: object
host: localhost:8080
info:
  contact:
    email: support@example.com
    name: API Support
  description: Reference Golang API
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Reference Golang API
  version: "1.0"
paths:
  /api/v1/entities/:
    get:
      consumes:
      - application/json
      description: Gets all Entities in DB
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Entity'
            type: array
      summary: Gets all Entities
      tags:
      - Entities
    post:
      consumes:
      - application/json
      description: Creates new Entity
      parameters:
      - description: Entity to update
        in: body
        name: entity
        required: true
        schema:
          $ref: '#/definitions/entity.Entity'
      produces:
      - application/json
      responses:
        "200":
          description: New Entity
          schema:
            $ref: '#/definitions/entity.Entity'
      summary: Creates new Entity
      tags:
      - Entities
  /api/v1/entities/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes an entity
      parameters:
      - description: Entity ID to delete
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Entity'
        "404":
          description: Can not find ID
          schema:
            $ref: '#/definitions/utils.ResponseData'
      summary: Deletes an entity
      tags:
      - Entities
    get:
      consumes:
      - application/json
      description: Gets an entity by ID
      parameters:
      - description: Entity ID to load
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Entity'
        "404":
          description: Can not find ID
          schema:
            $ref: '#/definitions/utils.ResponseData'
      summary: Gets an entity by ID
      tags:
      - Entities
    put:
      consumes:
      - application/json
      description: Updates an entity
      parameters:
      - description: Entity to update
        in: body
        name: entity
        required: true
        schema:
          $ref: '#/definitions/entity.Entity'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Entity'
      summary: Updates an entity
      tags:
      - Entities
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
